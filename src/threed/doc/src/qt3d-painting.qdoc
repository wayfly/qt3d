/****************************************************************************
**
** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/legal
**
** This file is part of the Qt3D documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and Digia.  For licensing terms and
** conditions see http://qt.digia.com/licensing.  For further information
** use the contact form at http://qt.digia.com/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.  Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: http://www.gnu.org/copyleft/fdl.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
\group qt3d::painting
\title Qt 3D Painting

Porting between desktop OpenGL and embedded OpenGL/ES has traditionally
been difficult.  The usual sequence of operations for a drawing request
in OpenGL consists of:

\list
    \li Select an appropriate shader program, or fixed-function pipeline
       rendering options.
    \li Set or adjust the current projection and modelview matrices.
    \li Specify vertex, normal, texture co-ordinate, and other attribute arrays.
    \li Specify textures, variables, and other rendering objects needed
       by the shader program.
    \li Draw fragments: triangles, triangle fans, quads, etc.
    \li Disable the arrays, textures, and modes that were selected.
\endlist

Desktop OpenGL, OpenGL/ES 1.1, and OpenGL/ES 2.0 all posses functionality
for the above, but they are all different.  OpenGL/ES 2.0 in particular
presents unique problems because it lacks a fixed-function pipeline mode
to perform common painting operations.

In Qt 3D, the QGLPainter class wraps OpenGL to present a consistent
OpenGL painting API across all platforms.  Shaders and fixed-function
options are supplied as an instance of QGLAbstractEffect.  Several
built-in standard effects are provided for drawing with flat colors,
material-based lighting, and simple texturing.

\generatelist{related}
*/
